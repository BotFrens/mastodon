name: Deploy

on:
  push:
    branches:
      - staging

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: admin
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Ruby and install gems
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Run Tests
      env:
        DATABASE_URL: postgres://postgresql:admin@localhost:5432/offtheeasel_test
      run: |
        RAILS_ENV=test bundle exec rake db:create db:migrate
        RAILS_ENV=test bundle exec rspec

  docker-deploy:
    name: Docker build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout code
        id: checkout
        uses: actions/checkout@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ote-web
          IMAGE_TAG: staging
        run: |
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy Amazon ECS API task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/ecs/staging-api-task-definition.json
          service: ote-api-staging
          cluster: ote-staging
          wait-for-service-stability: true

      # - name: Deploy to Amazon ECS Scheduled Tasks
      #   uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
      #   with:
      #     cluster: ote-staging
      #     task-definition: aws/ecs/staging-api-task-definition.json
